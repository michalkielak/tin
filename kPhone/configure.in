dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([README])

AC_CONFIG_HEADER(config.h)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_GCC_TRADITIONAL
AC_PROG_INSTALL
AC_PROG_MAKE_SET

dnl Check for Qt preprocessor 'moc'
AC_PATH_PROG(MOC, moc, /usr/local/bin/moc, $QTDIR/bin:$PATH:/usr/bin:/usr/X11R6/bin:/usr/lib/qt/bin::/usr/lib/qt3/bin:/usr/local/qt/bin:/usr/share/qt3/bin)

dnl Check for Qt GUI compiler 'uic'
AC_PATH_PROG(UIC, uic, /usr/local/bin/uic, $QTDIR/bin:$PATH:/usr/bin:/usr/X11R6/bin:/usr/lib/qt/bin:/usr/lib/qt3/bin:/usr/local/qt/bin:/usr/share/qt3/bin)

dnl Look in various places for Qt header files and libraries
AC_CACHE_CHECK(location of Qt header files,
  ac_cv_qt_inc, [
  if test -f $QTDIR/include/qglobal.h; then
    ac_cv_qt_inc=$QTDIR/include
  elif test -f /usr/lib/qt-3.1/include/qglobal.h; then
    ac_cv_qt_inc=/usr/lib/qt-3.1/include
  elif test -f /usr/lib/qt3/include/qglobal.h; then
    ac_cv_qt_inc=/usr/lib/qt3/include
  elif test -f /usr/local/include/qt/qglobal.h; then
    ac_cv_qt_inc=/usr/local/include/qt
  elif test -f /usr/include/qt/qglobal.h; then
    ac_cv_qt_inc=/usr/include/qt
  elif test -f /usr/share/qt3/include/qglobal.h; then
    ac_cv_qt_inc=/usr/share/qt3/include
  elif test -f /usr/include/qglobal.h; then
    ac_cv_qt_inc=/usr/include
  fi
]);

if test "$ac_cv_qt_inc" = ""; then
  echo "not found. Giving up."
  exit
fi

dnl Look for Qt library files
AC_CACHE_CHECK(location of Qt library,
  ac_cv_qt_lib, [
  for T in $QTDIR/lib $QTDIR /usr/lib/qt3 /usr/lib/qt3/lib64 /usr/lib/qt-3.1/lib /usr/lib/qt3/lib /usr/local/lib/qt /usr/share/qt3/lib /usr/lib; do
     if test "x$ac_cv_qt_lib" = "x"; then
       if test -f $T/libqt-mt.so -o -f $T/libqt-mt.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt";
       elif test -f $T/libqt-mt3.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt3";
       elif test -f $T/libqt-mt2.a; then
         ac_cv_qt_lib=$T;
         qt_mt=yes;
         qt_libname="qt-mt2";
       elif test -f $T/libqt.so -o -f $T/libqt.a; then
         ac_cv_qt_lib=$T;
         qt_mt=no;
         qt_libname="qt";
       elif test -f $T/libqt3.a; then
         ac_cv_qt_lib=$T;
         qt_mt=no;
         qt_libname="qt3";
       fi
     fi
  done
]);

if test "x$ac_cv_qt_lib" = "x"; then
  echo "not found. Giving up."
  exit
fi

AC_CACHE_VAL(ac_cv_qt_libname,
   ac_cv_qt_libname="$qt_libname"
)

 
AC_CACHE_CHECK(if Qt is multi-threaded,
  ac_cv_qt_mt,
  ac_cv_qt_mt=$qt_mt;
)

AC_MSG_CHECKING(whether to enable thread)
thread_default="yes"
AC_ARG_ENABLE(thread, [  --enable-thread=[no/yes] turn on threads
                       [default=yes]],, enable_thread=$thread_default)
AC_SUBST(AUDIO_MOC)
AUDIO_MOC="dspaudioout.moc.o dspaudioin.moc.o"
if test "$ac_cv_qt_mt" = "yes"; then
  if test "$enable_thread" = "yes"; then
    AC_DEFINE(QT_THREAD_SUPPORT)
    THREAD_FLAG="-DQT_THREAD_SUPPORT"
    AC_SUBST(THREAD_FLAG)
    AUDIO_MOC=""
    AC_MSG_RESULT(yes)
  else
  	THREAD_FLAG=""
    AC_SUBST(THREAD_FLAG)
    AC_MSG_RESULT(no)
  fi
fi



AC_MSG_CHECKING(whether to enable speex)
speex_default="yes"
AC_ARG_ENABLE(speex, [  --enable-speex=[no/yes] use SPEEX
                       [default=yes]],, enable_speex=$speex_default)

if test "$enable_speex" = "yes"; then
	AC_DEFINE(SPEEX)
	ENABLE_SPEEX="yes"
	AC_SUBST(ENABLE_SPEEX)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable language internationalisation - incomplete! -)
lipo_default="no"
AC_ARG_ENABLE(lipo, [  --enable-lipo=[no/yes] use language internationalisation - incomplete! -
                       [default=no]],, enable_lipo=$lipo_default)

if test "$enable_lipo" = "yes"; then
	AC_DEFINE(LIPO)
	ENABLE_LIPO="yes"
	AC_SUBST(ENABLE_LIPO)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi


AC_MSG_CHECKING(whether to enable srtp)
srtp_default="no"
AC_ARG_ENABLE(srtp, [  --enable-srtp=[no/yes] use SRTP
                       [default=no]],, enable_srtp=$srtp_default)

if test "$enable_srtp" = "yes"; then
	AC_DEFINE(SRTP)
	ENABLE_SRTP="yes"
	AC_SUBST(ENABLE_SRTP)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to activity check for presence -)
presact_default="no"
AC_ARG_ENABLE(presact, [  --enable-presact=[no/yes] activity check for presence -
                       [default=no]],, enable_presact=$presact_default)

if test "$enable_presact" = "yes"; then
	AC_DEFINE(PRESACT)
	ENABLE_PRESACT="yes"
	AC_SUBST(ENABLE_PRESACT)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi


AC_MSG_CHECKING(whether to use big or little endian format for audio)
endian_default="no"
AC_ARG_ENABLE(endian, [  --enable-endian=[no/yes] set to big endian (default is little)! -
                       [default=no]],, enable_endian=$endian_default)

if test "$enable_endian" = "yes"; then
	AC_DEFINE(ENDIAN)
	ENABLE_ENDIAN="yes"
	AC_SUBST(ENABLE_ENDIAN)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi




CFLAGS="-I$ac_cv_qt_inc -Wall $CFLAGS"
LIBS="-L$ac_cv_qt_lib -l$ac_cv_qt_libname -L/usr/local/lib -L/usr/X11R6/lib64 -L/usr/X11R6/lib"

dnl Check for X libraries.
AC_LANG_C
AC_CHECK_LIB(X11, main)
AC_CHECK_LIB(Xext, main)
AC_CHECK_LIB(Xt, main)
AC_CHECK_LIB(ICE, main)
AC_CHECK_LIB(SM, main)
AC_CHECK_LIB(Xss, main)

dnl Find libraries png and ssl
AC_CHECK_LIB(png, main)
AC_CHECK_LIB(ssl, [main], [], [AC_MSG_ERROR([libssl not found])])
AC_CHECK_HEADER(openssl/md5.h, [], [AC_MSG_ERROR([openssl/md5.h not found])])

dnl ALSA
AC_SUBST(ALSA)
ALSA="dspoutalsa.o"
AC_SUBST(LIBALSA)
LIBALSA="-lasound"
AC_CHECK_LIB(asound, [main], [], [ALSA="" LIBALSA=""])
AC_CHECK_HEADER(alsa/asoundlib.h, [], [ALSA="" LIBALSA=""])
alsa_default="yes"
AC_DEFINE(ALSA_SUPPORT) 
AC_MSG_RESULT(yes)
  
  
AC_PATH_XTRA
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h unistd.h)
AC_CHECK_HEADERS([X11/extensions/scrnsaver.h], [], [],
		[[#include <X11/Xlib.h>
]])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_CHECK_FUNCS(select)

AC_MSG_CHECKING(whether to enable debugging)
debug_default="no"
AC_ARG_ENABLE(debug, [  --enable-debug=[no/yes] turn on debugging
                       [default=no]],, enable_debug=$debug_default)
if test "x$enable_debug" = "xyes"; then
         CFLAGS="$CFLAGS -g -DDEBUG"
AC_MSG_RESULT(yes)
else
CFLAGS="$CFLAGS -O3"
AC_MSG_RESULT(no)
fi

dnl Tests for Qt library
AC_LANG([C++])

if test "$enable_speex" = "yes"; then
	speex_make="Speex/Makefile"
else
	speex_make=""
fi

if test "$enable_lipo" = "yes"; then
	lipo_make="po/Makefile"
else
	lipo_make=""
fi

if test "$enable_srtp" = "yes"; then
	srtp_make="srtp/Makefile"
else
	srtp_make=""
fi

AC_CONFIG_FILES([Makefile kphone/Makefile dissipate2/Makefile ilbc/Makefile gsm/Makefile $speex_make icons/Makefile $srtp_make ringing/Makefile kdial/Makefile kaudio/Makefile $lipo_make])
AC_OUTPUT

echo ""
echo "Now type 'make', followed by 'make install' as root."
echo ""
